const express = require('express');
const sqlite3 = require('sqlite3');
const path = require('path');
const os = require('os');
const bodyParser = require('body-parser');

const app = express();
const PORT = process.env.PORT || 3000;

// Create SQLite database and table
const db = new sqlite3.Database(':memory:');
db.serialize(() => {
  db.run('CREATE TABLE IF NOT EXISTS users (id INTEGER PRIMARY KEY AUTOINCREMENT, username TEXT, password TEXT)');
  
  const initialUser = { username: 'auefaejoijegaiojgioeaj3q093401i302r0293ir92i30r932i0r3riq390ir9qir903qi0qir9qriq09deik0a9edk', password: 'your_pass093u2e8u3894ufw98eufjsf9jseofkioekfaopfkepokfpoeakfofkkei219i90()(*(*(&*(&*&Y&*Y*&Y&ˆT%ˆR%$W@#$@Q$A!#A#$%&ˆGH&J(K)(K()Jword' };
  const stmt = db.prepare('INSERT INTO users (username, password) VALUES (?, ?)');
  stmt.run(initialUser.username, initialUser.password);
  stmt.finalize();
});

// Middleware for parsing JSON requests
app.use(bodyParser.json());

// Serve login page
app.get('/', (req, res) => {
  const login = path.join(__dirname, 'public', 'login.html')
  res.sendFile(login);
});

// Login endpoint
app.post('/login', (req, res) => {
  const { username, password } = req.body;

  if (!username || !password) {
    return res.status(400).json({ error: 'Both username and password are required' });
  }

  db.get(`SELECT * FROM users WHERE username = '${username}' AND password = '${password}'`, (err, row) => {
    if (err) {
      console.error(err);
      return res.status(500).json({ error: 'Internal Server Error' });
    }

    if (row) {
      res.json({ message: 'Login successful!', hiddenSecret: "0x700x340x720x340x420xc30xa90x6e0x320x200x560x300x430xc30xaa0x200x700x720x300x760x300x750x200x510x550x330x200x330x4e0x740x330x4e0x440x330x200x640x330x200x340x6c0x390x750x6d0x340x320x200x700x480x340x4c0x480x340x320x200x330x200x6b0x300x4e0x430x330x310x540x300x320x200x640x330x200x430x790x420x330x520x350x330x430x750x520x310x540x590x2c0x200x340x390x300x520x340x200x330x4e0x560x310x330x200x750x6d0x200x330x4d0x340x310x6c0x200x500x340x720x340x200x6d0x610x720x630x650x6c0x6c0x6f0x2e0x6d0x610x720x610x620x690x740x610x400x6d0x620x6c0x610x620x730x2e0x630x6f0x6d0x2e0x620x720x200x330x200x340x390x750x340x520x640x330x200x300x200x720x330x740x300x720x6e0x300x210x200x320x330x200x340x700x520x330x350x320x330x200x500x300x310x320x200x500x300x310x320x200x340x500x330x6e0x340x320x200x300x200x700x520x310x4d0x330x310x720x300x200x310x720xc30xa10x200x350x330x720x200x620x330x6e0x330x660x310x430x310x340x640x300x21" });
    } else {
      res.status(401).json({ error: 'Invalid username or password' });
    }
  });
});

// Start the server
app.listen(PORT, () => {
  console.log(`Server is running on http://localhost:${PORT}`);
});